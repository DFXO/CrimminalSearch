#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NationalCriminal.Search.Web.Models.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CriminalDatabase")]
	public partial class CriminalDataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserLogin(UserLogin instance);
    partial void UpdateUserLogin(UserLogin instance);
    partial void DeleteUserLogin(UserLogin instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    #endregion
		
		public CriminalDataContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CriminalDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CriminalDataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CriminalDataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CriminalDataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CriminalDataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserLogin> UserLogins
		{
			get
			{
				return this.GetTable<UserLogin>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLogin")]
	public partial class UserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _email_id;
		
		private string _password;
		
		private System.Nullable<System.DateTime> _last_login;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onemail_idChanging(string value);
    partial void Onemail_idChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onlast_loginChanging(System.Nullable<System.DateTime> value);
    partial void Onlast_loginChanged();
    #endregion
		
		public UserLogin()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string email_id
		{
			get
			{
				return this._email_id;
			}
			set
			{
				if ((this._email_id != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemail_idChanging(value);
					this.SendPropertyChanging();
					this._email_id = value;
					this.SendPropertyChanged("email_id");
					this.Onemail_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_login", DbType="DateTime")]
		public System.Nullable<System.DateTime> last_login
		{
			get
			{
				return this._last_login;
			}
			set
			{
				if ((this._last_login != value))
				{
					this.Onlast_loginChanging(value);
					this.SendPropertyChanging();
					this._last_login = value;
					this.SendPropertyChanged("last_login");
					this.Onlast_loginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserLogin", Storage="_UserProfile", ThisKey="email_id", OtherKey="email_id", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserLogin = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserLogin = this;
						this._email_id = value.email_id;
					}
					else
					{
						this._email_id = default(string);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _email_id;
		
		private string _name;
		
		private string _address;
		
		private System.DateTime _registration_datetime;
		
		private EntityRef<UserLogin> _UserLogin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onemail_idChanging(string value);
    partial void Onemail_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void Onregistration_datetimeChanging(System.DateTime value);
    partial void Onregistration_datetimeChanged();
    #endregion
		
		public UserProfile()
		{
			this._UserLogin = default(EntityRef<UserLogin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string email_id
		{
			get
			{
				return this._email_id;
			}
			set
			{
				if ((this._email_id != value))
				{
					this.Onemail_idChanging(value);
					this.SendPropertyChanging();
					this._email_id = value;
					this.SendPropertyChanged("email_id");
					this.Onemail_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(100)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registration_datetime", DbType="DateTime NOT NULL")]
		public System.DateTime registration_datetime
		{
			get
			{
				return this._registration_datetime;
			}
			set
			{
				if ((this._registration_datetime != value))
				{
					this.Onregistration_datetimeChanging(value);
					this.SendPropertyChanging();
					this._registration_datetime = value;
					this.SendPropertyChanged("registration_datetime");
					this.Onregistration_datetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserLogin", Storage="_UserLogin", ThisKey="email_id", OtherKey="email_id", IsUnique=true, IsForeignKey=false)]
		public UserLogin UserLogin
		{
			get
			{
				return this._UserLogin.Entity;
			}
			set
			{
				UserLogin previousValue = this._UserLogin.Entity;
				if (((previousValue != value) 
							|| (this._UserLogin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserLogin.Entity = null;
						previousValue.UserProfile = null;
					}
					this._UserLogin.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
					}
					this.SendPropertyChanged("UserLogin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
